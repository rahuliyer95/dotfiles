" vi:ft=vim:foldmethod=marker
" Basic Settings {{{

" Enable project specific vimrc files ==> https://andrew.stwrt.ca/posts/project-specific-vimrc/
set exrc
set secure

" don't make vim compatible with vi
set nocompatible

set history=700
set nocp

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>
nmap <leader>q :q!<cr>

" Use system clipboard
set clipboard=unnamed
if has("unnamedplus") " X11 support
  set clipboard+=unnamedplus
endif

" default updatetime 4000ms is not good for async update
set updatetime=100

" Add `-` to word boundaries
set iskeyword-=-
" Add `_` to word boundaries
" set ikeyword-=_

" }}}

" VIM user interface {{{

set mouse=a

" Set 8 lines to the cursor - when moving vertically using j/k
set so=8

" Turn on the WiLd menu
set wildmenu
set wildmode=list:longest     " Wildcard matches show a list, matching the longest first
set wildignore+=.git,.hg,.svn " Ignore version control repos
set wildignore+=*.6           " Ignore Go compiled files
set wildignore+=*.pyc         " Ignore Python compiled files
set wildignore+=*.rbc         " Ignore Rubinius compiled files
set wildignore+=*.swp         " Ignore vim backups
set wildignore+=*.o           " Ignore compiled objects

"Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hid
set hidden

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set vb t_vb=
set tm=500

set splitright
if has('completeopt')
  set completeopt=menuone,noinsert,noselect,preview,longest
endif

" Line numbers
set relativenumber
set number

" Set the characters for the invisibles
set list
set listchars=tab:›\ ,trail:⋅
" set listchars+=eol:¬,
if !has("win32")
  set showbreak=↪ " The character to put to show a line has been wrapped
end
" }}}

" Colors and Fonts {{{

set background=dark
" Enable syntax highlighting
syntax enable
if !has('gui_running')
  set t_Co=256
  " vim hardcodes background color erase even if the terminfo file does not contain bce
  " (not to mention that libvte based terminals incorrectly contain bce in their terminfo files).
  " This causes incorrect background rendering when using a color theme with a background color.
  " See: https://github.com/kovidgoyal/kitty/issues/108
  " Copied from: https://github.com/mitchellh/vim-misc/blob/fddb7ee3a856b298fe33fb6ef0c8c67f79b801d9/vimrc.vim#L78
  let &t_ut=''
endif
if has('nvim')
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
else
  set guioptions=cegmt
endif
if has('termguicolors')
  set termguicolors
endif
if exists("&fuopt")
  set fuopt+=maxhorz
endif
" Column at text end
set colorcolumn=+1
highlight ColorColumn ctermbg=grey guibg=grey
" highlight Comment cterm=italic gui=italic

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf-8
set fileencoding=utf-8

" Use Unix as the standard file type
set ffs=unix,dos,mac
set number

" }}}

" Files, backups and undo {{{

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set noswapfile

" }}}

" Text, tab and indent related {{{

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2
set autoindent

" Linebreak on 100 characters
set lbr
set tw=100

set ai " Auto indent
set si " Smart indent
set wrap " Wrap lines

" }}}

" Visual mode related {{{

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

" }}}

" Moving around, tabs, windows and buffers {{{

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
nnoremap <space> /
nnoremap <c-space> ?

" Disable highlight when <leader><cr> is pressed
nnoremap <silent> <leader><cr> :noh<cr>

" Close the current buffer
nnoremap <leader>bd :BufferClose<cr>

" Close all the buffers
nnoremap <leader>ba :%bd!<cr>

" Useful mappings for managing tabs
nnoremap <leader>to :tabonly<cr>
nnoremap <leader>tc :tabclose<cr>

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
" Remember info about open buffers on close
set viminfo^=%

" }}}

" Spell checking {{{

" Pressing ,ss will toggle and untoggle spell checking
nnoremap <leader>ss :setlocal spell!<cr>

" }}}

" Misc {{{

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Toggle paste mode on and off
nnoremap <leader>pp :setlocal paste!<cr>

" Select pasted text
nnoremap gp `[v`]

" Command to write as root if we don't have permissions
cmap w!! %!sudo tee > /dev/null %

" }}}
